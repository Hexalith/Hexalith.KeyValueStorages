@page "/"
@page "/countries-with-provider"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<PageTitle>Countries</PageTitle>

<h1>Countries Management</h1>

<div class="mb-4">
    <h2>Add New Country</h2>
    <EditForm Model="newCountry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="mb-3">
            <label for="code" class="form-label">Code</label>
            <InputText id="code" @bind-Value="newCountry.Code" class="form-control" />
        </div>
        
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" @bind-Value="newCountry.Name" class="form-control" />
        </div>
        
        <div class="mb-3">
            <label for="currency" class="form-label">Currency</label>
            <InputText id="currency" @bind-Value="newCountry.Currency" class="form-control" />
        </div>
        
        <div class="mb-3">
            <label for="phonePrefix" class="form-label">Phone Prefix</label>
            <InputNumber id="phonePrefix" @bind-Value="newCountry.PhonePrefix" class="form-control" />
        </div>
        
        <button type="submit" class="btn btn-primary">@(editMode ? "Update" : "Add") Country</button>
        @if (editMode)
        {
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        }
    </EditForm>
</div>

<h2>Country List</h2>

@if (countries.Count == 0)
{
    <p>No countries available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Currency</th>
                <th>Phone Prefix</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var country in countries)
            {
                <tr>
                    <td>@country.Value.Code</td>
                    <td>@country.Value.Name</td>
                    <td>@country.Value.Currency</td>
                    <td>@country.Value.PhonePrefix</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditCountry(country)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCountry(country.Value.Code)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    [Inject(Key = "sample")]
    required public IKeyValueProvider DataProvider { get; set; }

    private IKeyValueStore<string, CountryState>? _countriesStore;
    private IKeyValueStore<string, CountryState> CountriesStore
        => _countriesStore ??= DataProvider.Create<string, CountryState>("testdb", "country");

    private IKeyValueStore<string, CountryIndexState>? _countryIdsStore;
    private IKeyValueStore<string, CountryIndexState> CountryIdsStore
        => _countryIdsStore ??= DataProvider.Create<string, CountryIndexState>("testdb", "country");

    private List<CountryState> countries = new();
    private CountryViewModel newCountry = new();
    private bool editMode = false;
    private string? originalCode;

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<string>? ids = (await CountryIdsStore.TryGetAsync("All", CancellationToken.None))?.Value;
        if (ids is null)
        {
            // Initialize the index if it doesn't exist
            await CountryIdsStore.AddAsync("All", new CountryIndexState(new List<string>()), CancellationToken.None);
            countries = new List<CountryState>();
            return;
        }

        var countryIds = ids ?? [];
        var countryTasks = new List<Task<CountryState>>();
        foreach (var id in countryIds)
        {
            countryTasks.Add(CountriesStore.GetAsync(id, CancellationToken.None));
        }
        countries = (await Task.WhenAll(countryTasks)).ToList();
    }

    private async Task DeleteCountry(string code)
    {
        var country = countries.First(p => p.Value.Code == code);
        await CountriesStore.RemoveAsync(country.Value.Code, country.Etag, CancellationToken.None);
        var ids = await CountryIdsStore.GetAsync("All", CancellationToken.None);
        await CountryIdsStore.SetAsync(
            "All",
            new CountryIndexState(ids.Value.Where(p => p != country.Value.Code).ToList()),
            CancellationToken.None);
        countries.Remove(country);
        StateHasChanged();
    }

    private async Task AddCountry(CountryState country)
    {
        if (countries.Any(p => p.Value.Code == country.Value.Code))
            return;
        var ids = await CountryIdsStore.GetAsync("All", CancellationToken.None);
        await CountryIdsStore.SetAsync(
            "All",
            new CountryIndexState(ids.Value.Append(country.Value.Code).ToList()),
            CancellationToken.None);
        var etag = await CountriesStore.AddAsync(country.Value.Code, country, CancellationToken.None);
        countries.Add(country with { Etag = etag });
        StateHasChanged();
    }

    private async Task UpdateCountry(CountryState country)
    {
        var existing = countries.FirstOrDefault(p => p.Value.Code == country.Value.Code);
        if (existing is null)
            return;
        var etag = await CountriesStore.SetAsync(country.Value.Code, country, CancellationToken.None);
        countries.Remove(existing);
        countries.Add(country with { Etag = etag });
        StateHasChanged();
    }

    private void EditCountry(CountryState country)
    {
        newCountry = new(country);
        originalCode = country.Value.Code;
        editMode = true;
    }

    private void CancelEdit()
    {
        newCountry = new();
        originalCode = null;
        editMode = false;
    }

    private async Task HandleValidSubmit()
    {
        if (editMode)
        {
            if (originalCode != newCountry.Code)
            {
                // If the code changed, we need to delete the old one and add a new one
                var oldCountry = countries.First(p => p.Value.Code == originalCode);
                await DeleteCountry(originalCode);
                await AddCountry(newCountry.CountryState);
            }
            else
            {
                var oldCountry = countries.First(p => p.Value.Code == originalCode);
                await UpdateCountry(new CountryState(newCountry.Country, oldCountry.Etag, oldCountry.TimeToLive));
            }
        }
        else
        {
            await AddCountry(newCountry.CountryState);
        }

        // Reset form
        newCountry = new();
        editMode = false;
        originalCode = null;
    }
}

